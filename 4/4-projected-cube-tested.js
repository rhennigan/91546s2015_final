// Generated by CoffeeScript 1.9.1
(function() {
  var BLUE, GRAY, GREEN, Main, RED, cgl, main,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RED = new CoffeeGL.Colour.RGB(0.839216, 0.290196, 0.152941);

  GREEN = new CoffeeGL.Colour.RGB(0.4, 0.796078, 0.223529);

  BLUE = new CoffeeGL.Colour.RGB(0.0470588, 0.352941, 0.505882);

  GRAY = new CoffeeGL.Colour.RGB(0.556863, 0.678431, 0.670588);

  Main = (function() {
    function Main() {
      this.draw = bind(this.draw, this);
      this.update = bind(this.update, this);
      this.init = bind(this.init, this);
    }

    Main.prototype.init = function() {
      var c, cn, col, h, i, req, res, seg, th;
      this.top = new CoffeeGL.Node();
      req = new CoffeeGL.Request('4-projected-cube-tested.glsl');
      req.get((function(_this) {
        return function(data) {
          _this.shader = new CoffeeGL.Shader(data);
          _this.shader.bind();
          return _this.shader.setUniform3v("uAmbientLightingColor", new CoffeeGL.Colour.RGB(0.025, 0.025, 0.025));
        };
      })(this));
      this.camera = new CoffeeGL.Camera.MousePerspCamera(new CoffeeGL.Vec3(0, 0, 15));
      this.top.add(this.camera);
      this.light1 = new CoffeeGL.Light.PointLight(new CoffeeGL.Vec3(10, 0, 0), RED);
      this.light2 = new CoffeeGL.Light.PointLight(new CoffeeGL.Vec3(0, 10, 0), GREEN);
      this.light3 = new CoffeeGL.Light.PointLight(new CoffeeGL.Vec3(0, 0, 10), BLUE);
      this.top.add(this.light1);
      this.top.add(this.light2);
      this.top.add(this.light3);
      th = 0.025;
      res = 10;
      seg = 4;
      h = 2.0;
      col = new CoffeeGL.Colour.RGBA(0.5, 0.5, 0.5, 1.0);
      this.cube = new CoffeeGL.Node();
      this.cs = (function() {
        var j, results;
        results = [];
        for (i = j = 1; j <= 12; i = ++j) {
          c = new CoffeeGL.Shapes.Cylinder(th, res, seg, h, col);
          cn = new CoffeeGL.Node(c);
          this.cube.add(cn);
          results.push(cn);
        }
        return results;
      }).call(this);
      this.cs[0].matrix.translate(new CoffeeGL.Vec3(-1, 0, 1));
      this.cs[1].matrix.translate(new CoffeeGL.Vec3(-1, 0, -1));
      this.cs[2].matrix.translate(new CoffeeGL.Vec3(1, 0, 1));
      this.cs[3].matrix.translate(new CoffeeGL.Vec3(1, 0, -1));
      this.cs[4].matrix.rotate(new CoffeeGL.Vec3(1, 0, 0), Math.PI / 2);
      this.cs[4].matrix.translate(new CoffeeGL.Vec3(-1, 0, -1));
      this.cs[5].matrix.rotate(new CoffeeGL.Vec3(1, 0, 0), Math.PI / 2);
      this.cs[5].matrix.translate(new CoffeeGL.Vec3(-1, 0, 1));
      this.cs[6].matrix.rotate(new CoffeeGL.Vec3(1, 0, 0), Math.PI / 2);
      this.cs[6].matrix.translate(new CoffeeGL.Vec3(1, 0, -1));
      this.cs[7].matrix.rotate(new CoffeeGL.Vec3(1, 0, 0), Math.PI / 2);
      this.cs[7].matrix.translate(new CoffeeGL.Vec3(1, 0, 1));
      this.cs[8].matrix.rotate(new CoffeeGL.Vec3(0, 0, 1), Math.PI / 2);
      this.cs[8].matrix.translate(new CoffeeGL.Vec3(1, 0, -1));
      this.cs[9].matrix.rotate(new CoffeeGL.Vec3(0, 0, 1), Math.PI / 2);
      this.cs[9].matrix.translate(new CoffeeGL.Vec3(1, 0, 1));
      this.cs[10].matrix.rotate(new CoffeeGL.Vec3(0, 0, 1), Math.PI / 2);
      this.cs[10].matrix.translate(new CoffeeGL.Vec3(-1, 0, -1));
      this.cs[11].matrix.rotate(new CoffeeGL.Vec3(0, 0, 1), Math.PI / 2);
      this.cs[11].matrix.translate(new CoffeeGL.Vec3(-1, 0, 1));
      this.top.add(this.cube);
      GL.enable(GL.CULL_FACE);
      GL.cullFace(GL.BACK);
      return GL.enable(GL.DEPTH_TEST);
    };

    Main.prototype.update = function(dt) {
      var ref, ref1, ref2, t1, t2, t3, x, y, z;
      x = this.camera.pos.x;
      y = this.camera.pos.y;
      z = this.camera.pos.z;
      t1 = dt * 2 * Math.PI / 1000;
      t2 = dt * 4 * Math.PI / 1000;
      t3 = dt * 6 * Math.PI / 1000;
      ref = [x * Math.cos(t1) - y * Math.sin(t1), y * Math.cos(t1) + x * Math.sin(t1)], this.light1.pos.x = ref[0], this.light1.pos.y = ref[1];
      ref1 = [x * Math.cos(t2) - y * Math.sin(t2), y * Math.cos(t2) + x * Math.sin(t2)], this.light2.pos.x = ref1[0], this.light2.pos.y = ref1[1];
      return ref2 = [x * Math.cos(t3) - y * Math.sin(t3), y * Math.cos(t3) + x * Math.sin(t3)], this.light3.pos.x = ref2[0], this.light3.pos.y = ref2[1], ref2;
    };

    Main.prototype.draw = function() {
      GL.clearColor(0.15, 0.15, 0.15, 1.0);
      GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);
      if (this.top != null) {
        return this.top.draw();
      }
    };

    return Main;

  })();

  main = new Main();

  cgl = new CoffeeGL.App('webgl-canvas', main, main.init, main.draw, main.update);

}).call(this);

//# sourceMappingURL=4-projected-cube-tested.js.map
