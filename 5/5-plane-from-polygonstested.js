// Generated by CoffeeScript 1.9.1
(function() {
  var add3, cgl, cross3, main, norm3, normal, normalize3, sc_mul3, sub3;

  add3 = function(u, v) {
    return new Vec3(u.x + v.x, u.y + v.y, u.z + v.z);
  };

  sub3 = function(u, v) {
    return new Vec3(u.x - v.x, u.y - v.y, u.z - v.z);
  };

  sc_mul3 = function(v, s) {
    return new CoffeeGL.Vec3(v.x * s, v.y * s, v.z * s);
  };

  norm3 = function(v) {
    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
  };

  normalize3 = function(v) {
    return sc_mul3(v, 1 / norm3(v));
  };

  cross3 = function(u, v) {
    return new CoffeeGL.Vec3(-(u.z * v.y) + u.y * v.z, u.z * v.x - u.x * v.z, -(u.y * v.x) + u.x * v.y);
  };

  normal = function(vertices) {
    var center, i, j, k, n, normalVector, normals, ref, ref1, v1, v2;
    center = new CoffeeGL.Vec3(0, 0, 0);
    n = vertices.length;
    for (i = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      center.x += vertices[i].x;
      center.y += vertices[i].y;
      center.z += vertices[i].z;
    }
    center.x = center.x / n;
    center.y = center.y / n;
    center.z = center.z / n;
    normals = (function() {
      var k, ref1, results;
      results = [];
      for (i = k = 0, ref1 = n; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
        v1 = sub3(vertices[i], center);
        v2 = sub3(vertices[(i + 1) % n], center);
        results.push(normalize3(cross3(v1, v2)));
      }
      return results;
    })();
    normalVector = new CoffeeGL.Vec3(0, 0, 0);
    for (i = k = 0, ref1 = n; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
      center.x += vertices[i].x;
      center.y += vertices[i].y;
      center.z += vertices[i].z;
    }
    center.x = center.x / n;
    center.y = center.y / n;
    center.z = center.z / n;
    GL.enable(GL.CULL_FACE);
    GL.cullFace(GL.BACK);
    GL.enable(GL.DEPTH_TEST);
    return {
      update: (function(_this) {
        return function(dt) {};
      })(this),
      draw: (function(_this) {
        return function() {
          GL.clearColor(0.15, 0.15, 0.15, 1.0);
          GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);
          if (_this.top != null) {
            return _this.top.draw();
          }
        };
      })(this)
    };
  };

  main = new Main();

  cgl = new CoffeeGL.App('webgl-canvas', main, main.init, main.draw, main.update);

}).call(this);

//# sourceMappingURL=5-plane-from-polygonstested.js.map
