// Generated by CoffeeScript 1.9.1
(function() {
  var SVGContainer, c, g, nc, rc;

  SVGContainer = (function() {
    var blue, createSVGCircle, createSVGLine, createSVGText, gray, green, orange, stroke, svg;

    blue = 'rgb(12, 90, 129)';

    orange = 'rgb(214, 74, 39)';

    gray = 'rgb(142, 173, 171)';

    green = 'rgb(102, 203, 57)';

    stroke = '0.01';

    svg = document.getElementById("svgcontainer");

    function SVGContainer() {
      this.n = 5;
      this.r = 0.75;
    }

    createSVGLine = function(p1, p2, c, d) {
      var line;
      line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      line.setAttribute('x1', p1.x);
      line.setAttribute('y1', p1.y);
      line.setAttribute('x2', p2.x);
      line.setAttribute('y2', p2.y);
      line.setAttribute('stroke-width', stroke);
      line.setAttribute('stroke', c);
      if (d) {
        line.setAttribute('stroke-dasharray', "0.025, 0.025");
      }
      return line;
    };

    createSVGCircle = function(cx, cy, r) {
      var circle;
      circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
      circle.setAttribute('cx', cx);
      circle.setAttribute('cy', cy);
      circle.setAttribute('r', r);
      circle.setAttribute('fill', 'none');
      circle.setAttribute('stroke', orange);
      circle.setAttribute('stroke-width', stroke);
      return circle;
    };

    createSVGText = function(text, x, y, s, c) {
      var label;
      label = document.createElementNS('http://www.w3.org/2000/svg', 'text');
      label.setAttribute('x', x);
      label.setAttribute('y', y);
      label.setAttribute('fill', c);
      label.setAttribute('font-size', s);
      label.setAttribute('font-family', 'helvetica');
      label.setAttribute('style', 'font-weight:bold');
      label.innerHTML = text;
      return label;
    };

    SVGContainer.prototype.drawImage = function() {
      var c_line, circle, e_line, eps, ex, ey, i, j, norm, p1, p2, p3, p4, p_line, ref, s, tx, ty, x, y;
      s = 1.5 - this.r;
      circle = createSVGCircle(this.r + s, this.r + s, this.r);
      svg.appendChild(circle);
      ex = 0;
      ey = 0;
      for (i = j = 0, ref = this.n; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        p1 = {
          x: this.r * Math.cos(i * (2 * Math.PI) / this.n) + this.r + s,
          y: this.r * Math.sin(i * (2 * Math.PI) / this.n) + this.r + s
        };
        p2 = {
          x: this.r * Math.cos((i + 1) * (2 * Math.PI) / this.n) + this.r + s,
          y: this.r * Math.sin((i + 1) * (2 * Math.PI) / this.n) + this.r + s
        };
        p_line = createSVGLine(p1, p2, blue, false);
        svg.appendChild(p_line);
        p3 = {
          x: (p1.x + p2.x) / 2,
          y: (p1.y + p2.y) / 2
        };
        c_line = createSVGLine({
          x: this.r + s,
          y: this.r + s
        }, p3, blue, false);
        svg.appendChild(c_line);
        x = p3.x - 1.5;
        y = p3.y - 1.5;
        norm = Math.sqrt(x * x + y * y);
        ex = this.r * x / norm + 1.5;
        ey = this.r * y / norm + 1.5;
        p4 = {
          x: ex,
          y: ey
        };
        e_line = createSVGLine(p3, p4, gray, true);
        svg.appendChild(e_line);
      }
      svg.appendChild(createSVGLine({
        x: this.r + s,
        y: this.r + s
      }, {
        x: 2 * this.r + s,
        y: this.r + s
      }, green, true));
      svg.appendChild(createSVGText("n = " + this.n, 0.1, 0.1, '0.1px', 'black'));
      svg.appendChild(createSVGText('r', this.r + 1.3, this.r - .05 + s, '0.1px', green));
      tx = Math.cos(Math.PI / this.n) + this.r;
      ty = Math.sin(Math.PI / this.n) + this.r;
      eps = Math.round(1000 * (this.r - this.r * Math.cos(Math.PI / this.n))) / 1000;
      svg.appendChild(createSVGText("&epsilon; = r - r cos(&pi;/n)", ex + .05, ey + .05, '0.075px', gray));
      return svg.appendChild(createSVGText("&nbsp;&nbsp; = " + eps, ex + .05, ey + .05 + .15, '0.075px', gray));
    };

    SVGContainer.prototype.clearImage = function() {
      var results;
      results = [];
      while (svg.childElementCount > 0) {
        results.push(svg.removeChild(svg.firstChild));
      }
      return results;
    };

    return SVGContainer;

  })();

  c = new SVGContainer();

  c.drawImage();

  g = new dat.GUI();

  nc = g.add(c, 'n', 3, 50).step(1);

  rc = g.add(c, 'r', 0.4, 1.75);

  nc.onChange((function(_this) {
    return function() {
      c.clearImage();
      return c.drawImage();
    };
  })(this));

  rc.onChange((function(_this) {
    return function() {
      c.clearImage();
      return c.drawImage();
    };
  })(this));

}).call(this);

//# sourceMappingURL=3-polygon-circleapprox-tested.js.map
